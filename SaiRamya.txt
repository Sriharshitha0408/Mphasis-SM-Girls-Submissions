
-----------------------------------------------------------
1)Create two tables and insert in both the tables using procedure with exception handling and rollback.
-----------------------------------------------------------------
Creation of book and book_information table:

create table book 
(id number primary key,
cost number,
name varchar2(20));

create table book_information 
(authorname varchar2(20) primary key,

year number);
-----------------------------------------
Creation of procedure:
-------------
create or replace procedure insert_b(id IN number,cost IN number,name  IN varchar2,authorname IN varchar2,year IN number)is
begin
insert into book values(id,cost,name);
insert into book_information values(authorname,year);
end;

declare
begin
insert_b(102,500,'java','johnson','2010');
insert_b(101,250,'c','john','2019');
insert_b(103,600,'c#','vilson','2009');
exception
when dup_val_on_index then
Raise_application_error(-20208,'duplicate values are not allowed');
rollback;
end;

select * from book;
select * from book_information;

---------------------------------------------------------------------
2)Create a function returning a single row using cursor
---------------------------------------------------
create or replace function singlerow (id number)
   return sys_refcursor
is
   c  sys_refcursor;
begin
   open c for
      select * from book where id = id;
   return c;
end;
 
declare
c sys_refcursor;
TYPE book is RECORD(id number,cost number,name varchar2(20));
b book;
begin
  c:=singlerow(101);
  fetch c into b;
  dbms_output.put_line(b.id||','||b.cost||','||b.name);
end;

----------------------------------------------------------
3)Create function returns multiple rows
----------------------------------------------------


CREATE TABLE person (
 account_id INT,
 name VARCHAR2(20),
address varchar2(20)
);

INSERT INTO person VALUES ( 1, 'sai','Hyderabad' );
INSERT INTO person VALUES ( 2, 'ramya','bangalore' );

select * from person;

CREATE OR REPLACE FUNCTION get_persons(
  Acc_id IN person.account_id%TYPE) RETURN person%ROWTYPE
AS
  x person%ROWTYPE;
BEGIN
  SELECT * INTO   x FROM   person WHERE  account_id = Acc_id;

  RETURN x;
END;
/


DECLARE
  b person%ROWTYPE;
BEGIN
 b := get_persons( 1 );
DBMS_OUTPUT.PUT_LINE( b.name ||' ' || b.address);
b := get_persons( 2 );
  DBMS_OUTPUT.PUT_LINE( b.name ||' ' || b.address);
END;
/